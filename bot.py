import logging
import json
import requests
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8101750587:AAEoO1Aote7wHIRDADD4kpwFyYOYIkibe_c"
AIRTABLE_API_KEY = "patZ7hX8W8F8apmJm.9adf2ed71f8925dd372af08a5b5af2af4b12ead4abc0036be4ea68c43c47a8c4"
AIRTABLE_BASE_ID = "appTpq4tdeQ27uxQ9"
AIRTABLE_TABLE_NAME = "Tasks"
AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

contact_messages = {}

# ‚úÖ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å STUDENTUS", web_app=WebAppInfo(url="https://grud1807.github.io/tg-webapp/"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ STUDENTUS!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É üëá",
        reply_markup=reply_markup
    )

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user = update.effective_user

        deadline = f"2025-{data['deadline'][3:5]}-{data['deadline'][0:2]}"

        fields = {
            "–ü—Ä–µ–¥–º–µ—Ç": data['subject'],
            "–û–ø–∏—Å–∞–Ω–∏–µ": data['description'],
            "–¶–µ–Ω–∞": float(data['price']),
            "–î–µ–¥–ª–∞–π–Ω": deadline,
            "–°—Ç–∞—Ç—É—Å": "–ù–æ–≤–æ–µ",
            "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": user.id,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram": user.username or "–±–µ–∑ username",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞": "–ù–µ—Ç",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": "–ù–µ—Ç"
        }

        headers = {
            "Authorization": f"Bearer {AIRTABLE_API_KEY}",
            "Content-Type": "application/json"
        }

        response = requests.post(AIRTABLE_URL, headers=headers, json={"fields": fields})

        if response.status_code in [200, 201]:
            await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–æ–∑—å–º—ë—Ç –µ–≥–æ –≤ —Ä–∞–±–æ—Ç—É.")
        else:
            logger.error(f"Airtable error: {response.text}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
async def confirm_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split(":")
    record_id = data[1]
    user_type = data[2]
    user_id = query.from_user.id

    headers = {
        "Authorization": f"Bearer {AIRTABLE_API_KEY}",
        "Content-Type": "application/json"
    }

    task_url = f"{AIRTABLE_URL}/{record_id}"
    resp = requests.get(task_url, headers=headers)
    if resp.status_code != 200:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")
        return

    fields = resp.json().get("fields", {})
    update_fields = {}

    if user_type == "customer":
        update_fields["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"] = "–î–∞"
    elif user_type == "executor":
        update_fields["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"] = "–î–∞"

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    requests.patch(task_url, headers=headers, json={"fields": update_fields})

    # –ï—Å–ª–∏ –æ–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏
    if fields.get("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞") == "–î–∞" and fields.get("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è") == "–î–∞":
        requests.patch(task_url, headers=headers, json={"fields": {"–°—Ç–∞—Ç—É—Å": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"}})

        for uid in ["ID –∑–∞–∫–∞–∑—á–∏–∫–∞", "ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"]:
            uid_value = fields.get(uid)
            if uid_value and uid_value in contact_messages:
                try:
                    await context.bot.delete_message(chat_id=uid_value, message_id=contact_messages[uid_value])
                except Exception as e:
                    logger.warning(f"‚ùóÔ∏è–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await query.edit_message_text("‚úÖ –û–±–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    else:
        await query.edit_message_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É.")

# ‚úÖ –û–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
async def send_contacts(executor_id, executor_username, customer_id, customer_username, record_id, context):
    msg1 = await context.bot.send_message(
        chat_id=executor_id,
        text=f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º: @{customer_username}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"confirm:{record_id}:executor")
        ]])
    )
    contact_messages[executor_id] = msg1.message_id

    msg2 = await context.bot.send_message(
        chat_id=customer_id,
        text=f"üìû –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç: @{executor_username}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"confirm:{record_id}:customer")
        ]])
    )
    contact_messages[customer_id] = msg2.message_id

# ‚úÖ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    app.add_handler(CallbackQueryHandler(confirm_completion))

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
